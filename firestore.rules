rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthed() {
      return request.auth;
    }

    function hasUserData() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid))
    }

    function isUser(user) {
      return request.auth.uid == user;
    }

    function isNow(timestamp) {
      return request.time == timestamp;
    }
    
    function isValidUserData(userData) {
      return userData.keys() == ["lastPlacementTimestamp"]
        && isNow(userData.lastPlacementTimestamp);
    }

    function userWaitedDuration(currentTime, lastPlacementTime) {
      return (currentTime.toMillis() - 10*60*1000) > lastPlacementTime.toMillis();
    }

    match /users/{user} {
      allow read: if isAuthed() && isUser(user);
      allow write: if isAuthed() && isUser(user) && isValidUserData(request.resource.data) && userWaitedDuration(request.time, resource.data.lastPlacementTimestamp);
    }

    match /pixels/{pixel} {
      allow read: if true;
      allow write: if isAuthed() && hasUserData();
    }
  }
}